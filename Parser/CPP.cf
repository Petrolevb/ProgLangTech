entrypoints Program ;

Prg . Program ::=  [Expression] ;
terminator Expression "" ;

DefUsExp   . Expression ::= "using" [QualConst] ";" ;
TypedefExp . Expression ::= "typedef" TypeVar CppIdent ";" ;
StructExp  . Expression ::= "struct" CppIdent "{" [StructDecl] "}" ";"      ;
DeclExp    . Expression ::= DeclStatement ";" ;
DefExprFunc. Expression ::= Func    ;

DefFunc    . Func ::=          TypeVar CppIdent "(" [Arguments] ")" Body ;
InlineFunc . Func ::= "inline" TypeVar CppIdent "(" [Arguments] ")" Body ;

QualConsType . TypeVar ::= [QualConst] ;
NormalType   . TypeVar ::= Type ;
separator nonempty QualConst "::" ;
separator nonempty TypeVar "," ;

EmptyBody . Body ::= ";" ;
BodyFun   . Body ::= "{" [Statement] "}" ;

TypeArguments   . Arguments ::= TypeVar ;
DefArguments    . Arguments ::= TypeVar CppIdent ;
AffectArguments . Arguments ::= TypeVar CppIdent "=" Exp;
separator Arguments "," ;


--EmptStm     . Statement ::= ""                                           ;
ExpStm      . Statement ::= Exp ";"                                      ;
BodyStm     . Statement ::= "{" [Statement] "}"                          ;
DeclStm     . Statement ::= DeclStatement ";"                            ;
TypedefStm  . Statement ::= "typedef" TypeVar CppIdent  ";"             ;
StructStm   . Statement ::= "struct" CppIdent "{" [StructDecl] "}" ";"      ;
ReturnStm   . Statement ::= "return" Exp ";"                             ;
WhileStm    . Statement ::= "while" "(" Exp ")" Statement                ;
DoWhileStm  . Statement ::= "do" Statement "while" "(" Exp ")"  ";"      ;
ForStm      . Statement ::= "for" "(" DeclStatement ";" Exp ";" Exp ")" Statement  ;
IfSimpleStm . Statement ::= "if" "(" Exp ")" Statement                   ;
IfElseStm   . Statement ::= "if" "(" Exp ")" Statement "else" Statement  ;
SwitchStm   . Statement ::= "switch" "(" Exp ")" "{" [CaseStatement] "}" ;
terminator Statement "" ;
terminator CaseStatement ";" ;
BaseCaseStm    . CaseStatement ::= "case" Constant ":" Statement "break"  ;
DefaultCaseStm . CaseStatement ::= "default"       ":" Statement "break"  ;

StructElem . StructDecl ::= TypeVar CppIdent ;
terminator StructDecl ";" ;

MultDecl   . DeclStatement ::= TypeVar [CppIdent]        ;
CreatDecl  . DeclStatement ::= TypeVar CppIdent "=" Exp  ;
AffectDecl . DeclStatement ::= CppIdent "=" Exp ;
separator nonempty CppIdent "," ;


--RefType   . Type ::= Type "&";
--PointType . Type ::= Type "*";
--EmptyArTy . Type ::= Type "[]";
SpecificTy. Type ::= Type Specifier ;
TemplateTy. Type ::= Type "<" [TypeVar] ">" ;
ConstType . Type ::= "const" IdentType ;
BaseType  . Type ::=         IdentType ;
TVoid   . IdentType ::=  "void"   ; 
TBool   . IdentType ::=  "bool"   ;
TInt    . IdentType ::=  "int"    ;
TDouble . IdentType ::=  "double" ;

RefSpecifier   . Specifier ::= "&"  ;
PointSpecifier . Specifier ::= "*"  ;
ArraySpecifier . Specifier ::= "[]" ;

CInt    . Constant ::= [Integer] ;
terminator nonempty Integer ""  ;
CDouble . Constant ::= Double   ;
CFalse  . Constant ::= "false"  ;
CTrue   . Constant ::= "true"   ;
CString . Constant ::= [String] ;
CChar   . Constant ::= Char     ;
terminator nonempty String ""   ;

--Array   . QualConst ::= QualConst "[]" ;
--Point   . QualConst ::= QualConst "*" ;
--Ref     . QualConst ::= QualConst "&" ;
SpecificQC . QualConst ::= QualConst Specifier ;
Const      . QualConst ::= "const" BaseQualConst;
BaseQuCo   . QualConst ::=         BaseQualConst; 
QCPerso . BaseQualConst ::= CppIdent ;
Template. BaseQualConst ::= CppIdent "<" [TypeVar] ">" ;
--separator nonempty [QualConst] "," ;

EConst  . Exp16 ::= Constant;

EQualConst . Exp15 ::= [QualConst] ;
EIndex     . Exp15 ::= Exp15 "[" Exp "]" ;
FunCall    . Exp15 ::= Exp15 "(" [Exp] ")" ;

EPointProj . Exp14 ::= Exp14 "." Exp15  ;
EArrowProj . Exp14 ::= Exp14 "->" Exp15 ;

EIncr   . Exp14 ::= Exp15 "++" ;
EDecr   . Exp14 ::= Exp15 "--" ;
EDeferen. Exp14 ::= "*" Exp15 ;

EPoIncr . Exp13 ::= "++" Exp14 ;
EPoDecr . Exp13 ::= "--" Exp14 ;
ENeg    . Exp13 ::= "!" Exp14 ;

EMul  . Exp12 ::= Exp12 "*" Exp13 ; 
EDiv  . Exp12 ::= Exp12 "/" Exp13 ;
EMod  . Exp12 ::= Exp12 "%" Exp13 ;

EAdd  . Exp11 ::= Exp11 "+" Exp12 ;
ESub  . Exp11 ::= Exp11 "-" Exp12 ;

ELShift . Exp10 ::= Exp10 "<<" Exp11 ;

ERShift . Exp10 ::= Exp10 ">>" Exp11 ;

EStInf. Exp9 ::= Exp9 "<" Exp10 ;
EStSup. Exp9 ::= Exp9 ">" Exp10 ;
ESuEg . Exp9 ::= Exp9 ">=" Exp10 ;
EInfEg. Exp9 ::= Exp9 "<=" Exp10 ;

EEq   . Exp8 ::= Exp8 "==" Exp9 ;
EIneq . Exp8 ::= Exp8 "!=" Exp9 ;

EConj . Exp4 ::= Exp4 "&&" Exp5 ;

EDisj . Exp3 ::= Exp3 "||" Exp4 ;

EAss  . Exp2 ::= Exp14 "=" Exp2  ; 

EPlAss. Exp2 ::= Exp14 "+=" Exp2 ;
ESuAss. Exp2 ::= Exp14 "-=" Exp2 ;

EConditional . Exp2 ::= Exp3 "?" Exp ":" Exp3 ;

Exception    . Exp1 ::= "throw" Exp2 ;

coercions Exp 16 ;
separator Exp "," ;

position token CppIdent (letter (letter | digit | '_')* );


comment "/*" "*/" ;
comment "//" ;
comment "#" ;
