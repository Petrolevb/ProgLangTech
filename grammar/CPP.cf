-- LABEL . VALUE_CAT ::= PROD ;

-- terminator is a token that appear after every item of a list



entrypoints Program ;

Prg . Program ::=  [Expression] ;
terminator Expression "" ;

DefExprExp . Expression ::= Exp ";" ;
DefExprFunc. Expression ::= Func    ;
DefUsExp   . Expression ::= "using" [SpecType] ";" ;
--TypedefExp . Expression ::= "typedef" [SpecType] Ident ";" ;
separator nonempty SpecType "::" ;


DefFunc    . Func ::= Signature Arguments Body ;
InlineFunc . Func ::= "inline" Signature Arguments Body ;


DefSig . Signature ::= Type Ident;

-- Arguments is a list of Argument, or list of signature 
DefArguments . Arguments ::= "(" [Signature] ")" ;
separator Signature "," ;


-- Body is a list of statements
BaseBody   . Body ::= "{" [Statement] "}" ;
terminator Statement "" ;

EmptStm     . Statement ::= ";"                                          ;
ExpStm      . Statement ::= Exp ";"                                      ;
BodyStm     . Statement ::= "{" [Statement] "}"                          ;
TypedefStm  . Statement ::= "typedef" [SpecType] Ident ";" ;
ReturnStm   . Statement ::= "return" Exp ";"                             ;
WhileStm    . Statement ::= "while" "(" Exp ")" Statement                ;
DoWhileStm  . Statement ::= "do" Statement "while" "(" Exp ")"  ";"      ;
ForStm      . Statement ::= "for" "(" Exp ";" Exp ";" Exp ")" Statement  ;
IfSimpleStm . Statement ::= "if" "(" Exp ")" Statement                   ;
IfElseStm   . Statement ::= "if" "(" Exp ")" Statement "else" Statement  ;
SwitchStm   . Statement ::= "switch" "(" Exp ")" "{" [CaseStatement] "}" ;
terminator CaseStatement ";" ;
BaseCaseStm    . CaseStatement ::= "case" Constant ":" Body "break"  ;
DefaultCaseStm . CaseStatement ::= "default"       ":" Body "break"  ;



ConstType . Type ::= "const" Type;
RefType   . Type ::= Type "&";
PointType . Type ::= Type "*";
EmptyArTy . Type ::= Type "[]";
SizedArTy . Type ::= Type "[" Integer "]" ;
BaseType  . Type ::= IdentType;

TVoid   . IdentType ::=  "void"    ; 
TBool   . IdentType ::=  "bool"    ;
TInt    . IdentType ::=  "int"     ;
TDouble . IdentType ::=  "double"  ;
TSpec   . IdentType ::=  SpecType  ;
TPerso  . SpecType ::= Ident ;
Template. SpecType ::= Ident "<" Type ">" ;


CInt    . Constant ::= [Integer] ;
terminator nonempty Integer ""  ;
CDouble . Constant ::= Double   ;
CFalse  . Constant ::= "false"  ;
CTrue   . Constant ::= "true"   ;
CString . Constant ::= [String] ;
terminator nonempty String ""   ;
CVar    . Constant ::= Ident    ;


EConst  . Exp16 ::= Constant;

EIndex     . Exp15 ::= Exp15 "[" Exp "]" ;
EQualConst . Exp15 ::= [SpecType] [Ident]  ;
EVar       . Exp15 ::= Type [Ident]        ;
FunCall    . Exp15 ::= Exp15 "(" [Exp] ")" ;
separator Ident "," ;

EPointProj . Exp14 ::= Exp14 "." Exp15  ;
EArrowProj . Exp14 ::= Exp14 "->" Exp15 ;

EIncr   . Exp14 ::= Exp15 "++" ;
EDecr   . Exp14 ::= Exp15 "--" ;
EDeferen. Exp14 ::= "*" Exp15 ;

EPoIncr . Exp13 ::= "++" Exp14 ;
EPoDecr . Exp13 ::= "--" Exp14 ;
ENeg    . Exp13 ::= "!" Exp14 ;

EMul  . Exp12 ::= Exp12 "*" Exp13 ; 
EDiv  . Exp12 ::= Exp12 "/" Exp13 ;
EMod  . Exp12 ::= Exp12 "%" Exp13 ;

EAdd  . Exp11 ::= Exp11 "+" Exp12 ;
ESub  . Exp11 ::= Exp11 "-" Exp12 ;

ELShift . Exp10 ::= Exp10 "<<" Exp11 ;

ERShift . Exp10 ::= Exp10 ">>" Exp11 ;

EStInf. Exp9 ::= Exp9 "<" Exp10 ;
EStSup. Exp9 ::= Exp9 ">" Exp10 ;
ESuEg . Exp9 ::= Exp9 ">=" Exp10 ;
EInfEg. Exp9 ::= Exp9 "<=" Exp10 ;

EEq   . Exp8 ::= Exp8 "==" Exp9 ;
EIneq . Exp8 ::= Exp8 "!=" Exp9 ;

EConj . Exp4 ::= Exp4 "&&" Exp5 ;

EDisj . Exp3 ::= Exp3 "||" Exp4 ;

EAss  . Exp2 ::= Exp14 "=" Exp2  ; 

EPlAss. Exp2 ::= Exp14 "+=" Exp2 ;
ESuAss. Exp2 ::= Exp14 "-=" Exp2 ;

EConditional . Exp2 ::= Exp3 "?" Exp ":" Exp3 ;

Exception    . Exp1 ::= "throw" Exp2 ;

coercions Exp 16 ;
separator Exp "," ;

comment "/*" "*/" ;
comment "//" ;
comment "#" ;
